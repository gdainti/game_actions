/*! normalize.css 2012-03-11T12:53 UTC - http://github.com/necolas/normalize.css */article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none;height:0}[hidden]{display:none}html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}html,button,input,select,textarea{font-family:sans-serif}body{margin:0}a:focus{outline:thin dotted}a:hover,a:active{outline:0}h1{font-size:2em}h2{font-size:1.5em;margin:0.83em 0}h3{font-size:1.17em;margin:1em 0}h4{font-size:1em;margin:1.33em 0}h5{font-size:0.83em;margin:1.67em 0}h6{font-size:0.75em;margin:2.33em 0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}blockquote{margin:1em 40px}dfn{font-style:italic}mark{background:#ff0;color:#000}p,pre{margin:1em 0}pre,code,kbd,samp{font-family:monospace, serif;_font-family:'courier new', monospace;font-size:1em}pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}q{quotes:none}q:before,q:after{content:'';content:none}small{font-size:75%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}dl,menu,ol,ul{margin:0 0}dd{margin:0 0 0 40px}menu,ol,ul{padding:0 0 0 0;list-style-type:none}nav ul,nav ol{list-style:none;list-style-image:none}img{border:0;-ms-interpolation-mode:bicubic}svg:not(:root){overflow:hidden}figure{margin:0}form{margin:0}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{border:0;padding:0;white-space:normal;*margin-left:-7px}button,input,select,textarea{font-size:100%;margin:0;vertical-align:baseline;*vertical-align:middle}button,input{line-height:normal}button,input[type="button"],input[type="reset"],input[type="submit"],.btn-close-modal{cursor:pointer;-webkit-appearance:button;*overflow:visible}button[disabled],input[disabled]{cursor:default}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0;*height:13px;*width:13px}input[type="search"]{-webkit-appearance:textfield;box-sizing:content-box}input[type="search"]::-webkit-search-decoration,input[type="search"]::-webkit-search-cancel-button{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}html,body{min-height:100%}.wrapper{width:100%;padding:50px}.wrapper,.wrapper *{box-sizing:border-box}.actions *{font-family:'Trebuchet MS, Helvetica, Arial, sans-serif'}.actions-wrapper{background:url("../img/bg.jpg");width:361px;height:124px;padding:11px 28px}.actions__points{position:relative;display:inline-block;border:3px solid #fff;padding-left:30px;padding-right:12px;background:#555;border-radius:18px;box-shadow:inset 0 0 5px rgba(0,0,0,0.75);line-height:27px;font-size:22px;color:#fff;font-weight:bold;font-style:italic}.actions__points:before{content:'';width:35px;height:38px;position:absolute;top:-5px;left:-10px;background:url("../img/points.png")}.actions__list{padding:16px 0px 0px 19px;text-align:center}.action{width:57px;height:55px;display:inline-block;position:relative;cursor:pointer}.action+.action{margin-left:10px}.action__time{display:none;position:absolute;top:0;left:0;right:0;color:#fff;text-align:center;line-height:60px;font-size:14px;font-weight:bold;text-shadow:1px 1px 2px #000;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.action__image{width:100%;height:100%;background-repeat:no-repeat;background-position:center}.action--inactive .action__image{opacity:0.5}.action--inactive .action__time{display:inline-block}.action--145 .action__image{background-image:url("../img/actions/action1.png")}.action--146 .action__image{background-image:url("../img/actions/action2.png")}.action--146 .action__time{text-align:left;padding-left:9px}.action--147 .action__image{background-image:url("../img/actions/action3.png")}.action--148 .action__image{background-image:url("../img/actions/action4.png")}

/*# sourceMappingURL=data:application/json;base64, */
